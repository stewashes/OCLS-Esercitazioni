from gurobipy import *

m = Model('Vehicle Allocation Model')

N = 4

T = 6
tau = 1

Nodes = ['1', '2', '3', '4']
time = [1, 2, 3, 4, 5, 6]
time2 = [2, 3, 4, 5, 6]
av = {}
link_day = {}

for i in Nodes:
    for t in time:
        av[i, t] = 0

av['1', 1] = 1
av['3', 2] = 1
av['4', 2] = 1

d12 = 735
d13 = 440
d14 = 465
d23 = 465
d24 = 480
d34 = 500


link_day, demands, p, c = multidict({
    ('1', '1', 1): [0, 0, 0],
    ('1', '2', 1): [0, 0.4 * d12, 0.5 * d12],
    ('1', '3', 1): [0, 0.4 * d13, 0.5 * d13],
    ('1', '4', 1): [1, 0.4 * d14, 0.5 * d14],

    ('2', '1', 1): [0, 0.4 * d12, 0.5 * d12],
    ('2', '2', 1): [0, 0, 0],
    ('2', '3', 1): [0, 0.4 * d23, 0.5 * d23],
    ('2', '4', 1): [0, 0.4 * d24, 0.5 * d24],

    ('3', '1', 1): [0, 0.4 * d13, 0.5 * d13],
    ('3', '2', 1): [0, 0.4 * d23, 0.5 * d23],
    ('3', '3', 1): [0, 0, 0],
    ('3', '4', 1): [0, 0.4 * d34, 0.5 * d34],

    ('4', '1', 1): [0, 0.4 * d14, 0.5 * d14],
    ('4', '2', 1): [0, 0.4 * d24, 0.5 * d24],
    ('4', '3', 1): [0, 0.4 * d34, 0.5 * d34],
    ('4', '4', 1): [0, 0, 0],


    ('1', '1', 2): [0, 0, 0],
    ('1', '2', 2): [0, 0.4 * d12, 0.5 * d12],
    ('1', '3', 2): [0, 0.4 * d13, 0.5 * d13],
    ('1', '4', 2): [0, 0.4 * d14, 0.5 * d14],

    ('2', '1', 2): [0, 0.4 * d12, 0.5 * d12],
    ('2', '2', 2): [0, 0, 0],
    ('2', '3', 2): [0, 0.4 * d23, 0.5 * d23],
    ('2', '4', 2): [0, 0.4 * d24, 0.5 * d24],

    ('3', '1', 2): [0, 0.4 * d13, 0.5 * d13],
    ('3', '2', 2): [2, 0.4 * d23, 0.5 * d23],
    ('3', '3', 2): [0, 0, 0],
    ('3', '4', 2): [0, 0.4 * d34, 0.5 * d34],

    ('4', '1', 2): [1, 0.4 * d14, 0.5 * d14],
    ('4', '2', 2): [0, 0.4 * d24, 0.5 * d24],
    ('4', '3', 2): [0, 0.4 * d34, 0.5 * d34],
    ('4', '4', 2): [0, 0, 0],

    ('1', '1', 3): [0, 0, 0],
    ('1', '2', 3): [0, 0.4 * d12, 0.5 * d12],
    ('1', '3', 3): [0, 0.4 * d13, 0.5 * d13],
    ('1', '4', 3): [0, 0.4 * d14, 0.5 * d14],

    ('2', '1', 3): [0, 0.4 * d12, 0.5 * d12],
    ('2', '2', 3): [0, 0, 0],
    ('2', '3', 3): [0, 0.4 * d23, 0.5 * d23],
    ('2', '4', 3): [2, 0.4 * d24, 0.5 * d24],

    ('3', '1', 3): [0, 0.4 * d13, 0.5 * d13],
    ('3', '2', 3): [0, 0.4 * d23, 0.5 * d23],
    ('3', '3', 3): [0, 0, 0],
    ('3', '4', 3): [0, 0.4 * d34, 0.5 * d34],

    ('4', '1', 3): [0, 0.4 * d14, 0.5 * d14],
    ('4', '2', 3): [0, 0.4 * d24, 0.5 * d24],
    ('4', '3', 3): [0, 0.4 * d34, 0.5 * d34],
    ('4', '4', 3): [0, 0, 0],

    ('1', '1', 4): [0, 0, 0],
    ('1', '2', 4): [0, 0.4 * d12, 0.5 * d12],
    ('1', '3', 4): [1, 0.4 * d13, 0.5 * d13],
    ('1', '4', 4): [0, 0.4 * d14, 0.5 * d14],

    ('2', '1', 4): [0, 0.4 * d12, 0.5 * d12],
    ('2', '2', 4): [0, 0, 0],
    ('2', '3', 4): [1, 0.4 * d23, 0.5 * d23],
    ('2', '4', 4): [0, 0.4 * d24, 0.5 * d24],

    ('3', '1', 4): [0, 0.4 * d13, 0.5 * d13],
    ('3', '2', 4): [0, 0.4 * d23, 0.5 * d23],
    ('3', '3', 4): [0, 0, 0],
    ('3', '4', 4): [0, 0.4 * d34, 0.5 * d34],

    ('4', '1', 4): [0, 0.4 * d14, 0.5 * d14],
    ('4', '2', 4): [0, 0.4 * d24, 0.5 * d24],
    ('4', '3', 4): [1, 0.4 * d34, 0.5 * d34],
    ('4', '4', 4): [0, 0, 0],

    ('1', '1', 5): [0, 0, 0],
    ('1', '2', 5): [0, 0.4 * d12, 0.5 * d12],
    ('1', '3', 5): [0, 0.4 * d13, 0.5 * d13],
    ('1', '4', 5): [0, 0.4 * d14, 0.5 * d14],

    ('2', '1', 5): [1, 0.4 * d12, 0.5 * d12],
    ('2', '2', 5): [0, 0, 0],
    ('2', '3', 5): [0, 0.4 * d23, 0.5 * d23],
    ('2', '4', 5): [1, 0.4 * d24, 0.5 * d24],

    ('3', '1', 5): [0, 0.4 * d13, 0.5 * d13],
    ('3', '2', 5): [0, 0.4 * d23, 0.5 * d23],
    ('3', '3', 5): [0, 0, 0],
    ('3', '4', 5): [0, 0.4 * d34, 0.5 * d34],

    ('4', '1', 5): [2, 0.4 * d14, 0.5 * d14],
    ('4', '2', 5): [0, 0.4 * d24, 0.5 * d24],
    ('4', '3', 5): [0, 0.4 * d34, 0.5 * d34],
    ('4', '4', 5): [0, 0, 0],

    ('1', '1', 6): [0, 0, 0],
    ('1', '2', 6): [0, 0.4 * d12, 0.5 * d12],
    ('1', '3', 6): [0, 0.4 * d13, 0.5 * d13],
    ('1', '4', 6): [0, 0.4 * d14, 0.5 * d14],

    ('2', '1', 6): [1, 0.4 * d12, 0.5 * d12],
    ('2', '2', 6): [0, 0, 0],
    ('2', '3', 6): [0, 0.4 * d23, 0.5 * d23],
    ('2', '4', 6): [0, 0.4 * d24, 0.5 * d24],

    ('3', '1', 6): [0, 0.4 * d13, 0.5 * d13],
    ('3', '2', 6): [0, 0.4 * d23, 0.5 * d23],
    ('3', '3', 6): [0, 0, 0],
    ('3', '4', 6): [0, 0.4 * d34, 0.5 * d34],

    ('4', '1', 6): [0, 0.4 * d14, 0.5 * d14],
    ('4', '2', 6): [0, 0.4 * d24, 0.5 * d24],
    ('4', '3', 6): [1, 0.4 * d34, 0.5 * d34],
    ('4', '4', 6): [0, 0, 0],

})

x = m.addVars(link_day, name='x', lb=0, vtype=GRB.CONTINUOUS)

y = m.addVars(link_day, name='y', lb=0, vtype=GRB.CONTINUOUS)

obj = quicksum(p[i, j, t] * x[i, j, t] - c[i, j, t] * y[i, j, t] for i, j, t in link_day)

m.addConstrs((av[i, 1] == quicksum(x[i, j, 1] + y[i, j, 1] for j in Nodes) for i in Nodes), name='conservazione_t1')

m.addConstrs(((av[i, t] + quicksum(
    x[j, i, t - tau] + y[j, i, t - tau] + y[i, i, t - 1] for j in Nodes if j != i)) == quicksum(
    x[i, j, t] + y[i, j, t] for j in Nodes) for i in Nodes for t in time2), name='conservazione_t2')

m.addConstrs(x[i, j, t] <= demands[i, j, t] for i, j, t in link_day)
m.setObjective(obj, GRB.MAXIMIZE)
m.optimize()
for v in m.getVars():
    print('%s %f' % (v.Varname, v.X))

print('Optimal cost: %f' % m.objVal)


for i in Nodes:
    for j in Nodes:
        for t in time:
            if(demands[i,j,t] != 0):
                for v in m.getVars():
                    if(v.varName[0] == 'x' and v.varName[2] == i and v.varName[4] == j and v.varName[t] == t and demands[i,j,t] - v.X > 0):
                        print("Nodo: " + j + " non soddisfatto")



for v in m.getVars():
        if(v.varName[6] == '6' and v.X != 0):
                print("Ero di tipo: " + v.varName[0] + " / Partito da: " + v.varName[2] + " / Arrivato a: " + v.varName[4])




m.write('q1_v2.lp')